---
openapi: 3.0.3
info:
  title: "WebAPI for JRS, OPI and WSV exercises"
  version: "0.1"
paths:
  /api/opi/products:
    get:
      operationId: readAllProducts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IndividualisedProductItem'
    put:
      operationId: updateProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualisedProductItem'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualisedProductItem'
    post:
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualisedProductItem'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualisedProductItem'
  /api/opi/products/campaigns:
    post:
      operationId: createCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campaign'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
  /api/opi/products/{id}:
    get:
      operationId: readProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndividualisedProductItem'
    delete:
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /api/opi/touchpoints:
    get:
      operationId: readAllTouchpoints
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationaryTouchpoint'
    post:
      operationId: createTouchpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StationaryTouchpoint'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationaryTouchpoint'
  /api/opi/touchpoints/{id}:
    get:
      operationId: readTouchpoint
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationaryTouchpoint'
    delete:
      operationId: deleteTouchpoint
      parameters:
      - name: id
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /api/products:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AbstractProduct'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractProduct'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractProduct'
  /api/products/{productId}:
    get:
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractProduct'
    put:
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractProduct'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractProduct'
    delete:
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /api/touchpoints:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StationaryTouchpoint'
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StationaryTouchpoint'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationaryTouchpoint'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StationaryTouchpoint'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationaryTouchpoint'
  /api/touchpoints/{touchpointId}:
    get:
      parameters:
      - name: touchpointId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationaryTouchpoint'
    delete:
      parameters:
      - name: touchpointId
        in: path
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
components:
  schemas:
    AbstractProduct:
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        price:
          format: int32
          type: integer
    AbstractTouchpoint:
      type: object
      properties:
        id:
          format: int64
          type: integer
        erpPointOfSaleId:
          format: int64
          type: integer
        name:
          type: string
    Address:
      type: object
      properties:
        id:
          format: int64
          type: integer
        geoLat:
          format: int64
          type: integer
        geoLong:
          format: int64
          type: integer
        street:
          type: string
        houseNr:
          type: string
        zipCode:
          type: string
        city:
          type: string
    Campaign:
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        price:
          format: int32
          type: integer
        bundles:
          type: array
          items:
            $ref: '#/components/schemas/ProductBundle'
    IndividualisedProductItem:
      type: object
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        price:
          format: int32
          type: integer
        productType:
          $ref: '#/components/schemas/ProductType'
        expirationAfterStocked:
          format: int32
          type: integer
    ProductBundle:
      type: object
      properties:
        id:
          format: int64
          type: integer
        product:
          $ref: '#/components/schemas/IndividualisedProductItem'
        units:
          format: int32
          type: integer
    ProductType:
      enum:
      - BREAD
      - ROLL
      - PASTRY
      type: string
    StationaryTouchpoint:
      type: object
      properties:
        id:
          format: int64
          type: integer
        erpPointOfSaleId:
          format: int64
          type: integer
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
